// Auto-generated by `xtask dns`, do not edit manually.
pub(crate) struct DnsClient;

impl crate::DnsResolver<str> for DnsClient {
  fn resolve4(&self, domain: &str) -> Option<std::net::Ipv4Addr> {
    match domain {
      "dinorpg.de." => Some(std::net::Ipv4Addr::new(178, 32, 123, 64)),
      "dinorpg.de" => Some(std::net::Ipv4Addr::new(178, 32, 123, 64)),
      "hammerfest.es." => Some(std::net::Ipv4Addr::new(149, 202, 174, 50)),
      "hammerfest.es" => Some(std::net::Ipv4Addr::new(149, 202, 174, 50)),
      "mush.twinoid.es." => Some(std::net::Ipv4Addr::new(178, 32, 123, 64)),
      "mush.twinoid.es" => Some(std::net::Ipv4Addr::new(178, 32, 123, 64)),
      _ => None,
    }
  }
  fn resolve6(&self, _domain: &str) -> Option<std::net::Ipv6Addr> {
    None
  }
}

impl crate::DnsResolver<etwin_core::hammerfest::HammerfestServer> for DnsClient {
  fn resolve4(&self, domain: &etwin_core::hammerfest::HammerfestServer) -> Option<std::net::Ipv4Addr> {
    match domain {
      etwin_core::hammerfest::HammerfestServer::HammerfestEs => Some(std::net::Ipv4Addr::new(149, 202, 174, 50)),
      _ => None,
    }
  }
  fn resolve6(&self, _domain: &etwin_core::hammerfest::HammerfestServer) -> Option<std::net::Ipv6Addr> {
    None
  }
}
